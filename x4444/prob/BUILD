cc_binary(
    name = "remove_elem",
    srcs = ["remove_elem.cc"],
)

cc_binary(
    name = "remove_dup",
    srcs = ["remove_dup.cc"],
)

cc_binary(
    name = "remove_dup2",
    srcs = ["remove_dup2.cc"],
)

cc_binary(
    name = "major_elem",
    srcs = ["major_elem.cc"],
)

cc_binary(
    name = "rotate_arr",
    srcs = ["rotate_arr.cc"],
)

cc_binary(
    name = "max_profit",
    srcs = ["max_profit.cc"],
)

cc_binary(
    name = "max_profit2",
    srcs = ["max_profit2.cc"],
)

cc_binary(
    name = "climb_stairs",
    srcs = ["climb_stairs.cc"],
)

cc_binary(
    name = "longest_common_prefix",
    srcs = ["longest_common_prefix.cc"],
)

cc_binary(
    name = "len_of_last_word",
    srcs = ["len_of_last_word.cc"],
)

cc_binary(
    name = "graph_valid_binary_tree",
    srcs = ["graph_valid_binary_tree.cc"],
)

cc_binary(
    name = "permutations",
    srcs = ["permutations.cc"],
)

cc_binary(
    name = "permutations2",
    srcs = ["permutations2.cc"],
)

cc_binary(
    name = "jump_game",
    srcs = ["jump_game.cc"],
)

cc_binary(
    name = "jump_game2",
    srcs = ["jump_game2.cc"],
)

cc_binary(
    name = "max_sub_array",
    srcs = ["max_sub_array.cc"],
)

cc_binary(
    name = "h_index",
    srcs = ["h_index.cc"],
)

cc_binary(
    name = "first_occurrence",
    srcs = ["first_occurrence.cc"],
)

cc_binary(
    name = "foo",
    srcs = ["foo.cc"],
)

cc_binary(
    name = "random_set",
    srcs = ["random_set.cc"],
)

cc_binary(
    name = "prod_except_self",
    srcs = ["prod_except_self.cc"],
)

cc_binary(
    name = "gas_station",
    srcs = ["gas_station.cc"],
)

cc_binary(
    name = "candy",
    srcs = ["candy.cc"],
)

cc_binary(
    name = "roman_to_int",
    srcs = ["roman_to_int.cc"],
)

cc_binary(
    name = "int_to_roman",
    srcs = ["int_to_roman.cc"],
)

cc_binary(
    name = "reverse_words",
    srcs = ["reverse_words.cc"],
)

cc_binary(
    name = "trap",
    srcs = ["trap.cc"],
)

cc_binary(
    name = "zigzag",
    srcs = ["zigzag.cc"],
)

cc_binary(
    name = "text_justification",
    srcs = ["text_justification.cc"],
)

cc_binary(
    name = "valid_palindrome",
    srcs = ["valid_palindrome.cc"],
)

cc_binary(
    name = "is_subseq",
    srcs = ["is_subseq.cc"],
)

cc_binary(
    name = "two_sum_sorted",
    srcs = ["two_sum_sorted.cc"],
)

cc_binary(
    name = "two_sum",
    srcs = ["two_sum.cc"],
)

cc_binary(
    name = "container_with_most_water",
    srcs = ["container_with_most_water.cc"],
)

cc_binary(
    name = "3sum",
    srcs = ["3sum.cc"],
)

cc_binary(
    name = "min_size_subarray",
    srcs = ["min_size_subarray.cc"],
)

cc_binary(
    name = "longest_substr_wo_repeating",
    srcs = ["longest_substr_wo_repeating.cc"],
)

cc_binary(
    name = "substring_w_concatenation_all_words",
    srcs = ["substring_w_concatenation_all_words.cc"],
)

cc_binary(
    name = "min_window_substr",
    srcs = ["min_window_substr.cc"],
)

cc_binary(
    name = "valid_sudoku",
    srcs = ["valid_sudoku.cc"],
)

cc_binary(
    name = "spiral_matrix",
    srcs = ["spiral_matrix.cc"],
)

cc_binary(
    name = "rotate_matrix",
    srcs = ["rotate_matrix.cc"],
)

cc_binary(
    name = "set_matrix_zeros",
    srcs = ["set_matrix_zeros.cc"],
)

cc_binary(
    name = "game_of_life",
    srcs = ["game_of_life.cc"],
)

cc_binary(
    name = "ransom_note",
    srcs = ["ransom_note.cc"],
)

cc_binary(
    name = "isomorphic_strings",
    srcs = ["isomorphic_strings.cc"],
)

cc_binary(
    name = "group_anagrams",
    srcs = ["group_anagrams.cc"],
)

cc_binary(
    name = "restore_alphabet",
    srcs = ["restore_alphabet.cc"],
)

cc_binary(
    name = "valid_anagram",
    srcs = ["valid_anagram.cc"],
)

cc_binary(
    name = "word_pattern",
    srcs = ["word_pattern.cc"],
)

cc_binary(
    name = "happy_number",
    srcs = ["happy_number.cc"],
)

cc_binary(
    name = "contains_duplicate_2",
    srcs = ["contains_duplicate_2.cc"],
)

cc_binary(
    name = "longest_conseq_seq",
    srcs = ["longest_conseq_seq.cc"],
)

cc_binary(
    name = "summary_ranges",
    srcs = ["summary_ranges.cc"],
)

cc_binary(
    name = "merge_intervals",
    srcs = ["merge_intervals.cc"],
)

cc_binary(
    name = "insert_interval",
    srcs = ["insert_interval.cc"],
)

cc_binary(
    name = "min_arrows_burst_baloons",
    srcs = ["min_arrows_burst_baloons.cc"],
)

cc_binary(
    name = "valid_parentheses",
    srcs = ["valid_parentheses.cc"],
)

cc_binary(
    name = "canonical_path",
    srcs = ["canonical_path.cc"],
)

cc_binary(
    name = "min_stack",
    srcs = ["min_stack.cc"],
)

cc_binary(
    name = "eval_rpn",
    srcs = ["eval_rpn.cc"],
)

cc_binary(
    name = "basic_calc",
    srcs = ["basic_calc.cc"],
)

cc_binary(
    name = "lru_cache",
    srcs = ["lru_cache.cc"],
)

cc_binary(
    name = "linked_list_cycle",
    srcs = ["linked_list_cycle.cc"],
)

cc_binary(
    name = "add_two_numbers",
    srcs = ["add_two_numbers.cc"],
)

cc_binary(
    name = "merge_two_sorted_lists",
    srcs = ["merge_two_sorted_lists.cc"],
)

cc_binary(
    name = "copy_list_with_random_pointer",
    srcs = ["copy_list_with_random_pointer.cc"],
)

cc_binary(
    name = "reverse_linked_list",
    srcs = ["reverse_linked_list.cc"],
)

cc_binary(
    name = "reverse_linked_list2",
    srcs = ["reverse_linked_list2.cc"],
)

cc_binary(
    name = "reverse_nodes_in_k_groups",
    srcs = ["reverse_nodes_in_k_groups.cc"],
)

cc_binary(
    name = "rotate_linked_list_right",
    srcs = ["rotate_linked_list_right.cc"],
)

cc_binary(
    name = "remove_dup_linked_list",
    srcs = ["remove_dup_linked_list.cc"],
)

cc_binary(
    name = "remove_dup_linked_list2",
    srcs = ["remove_dup_linked_list2.cc"],
)

cc_binary(
    name = "remove_from_end_of_list",
    srcs = ["remove_from_end_of_list.cc"],
)

cc_binary(
    name = "partition_list",
    srcs = ["partition_list.cc"],
)

cc_binary(
    name = "max_depth_of_binary_tree",
    srcs = ["max_depth_of_binary_tree.cc"],
)

cc_binary(
    name = "is_same_tree",
    srcs = ["is_same_tree.cc"],
)

cc_binary(
    name = "invert_tree",
    srcs = ["invert_tree.cc"],
)

cc_binary(
    name = "is_symmetric_tree",
    srcs = ["is_symmetric_tree.cc"],
)

cc_binary(
    name = "construct_binary_tree_from_pre_and_in_order",
    srcs = ["construct_binary_tree_from_pre_and_in_order.cc"],
)

cc_binary(
    name = "construct_binary_tree_from_in_and_post_order",
    srcs = ["construct_binary_tree_from_in_and_post_order.cc"],
)

cc_binary(
    name = "populating_next_right_pointers",
    srcs = ["populating_next_right_pointers.cc"],
)

cc_binary(
    name = "flatten_binary_tree_to_linked_list",
    srcs = ["flatten_binary_tree_to_linked_list.cc"],
)

cc_binary(
    name = "binary_tree_path_sum",
    srcs = ["binary_tree_path_sum.cc"],
)

cc_binary(
    name = "sum_root_to_leaf_numbers",
    srcs = ["sum_root_to_leaf_numbers.cc"],
)

cc_binary(
    name = "binary_tree_max_path_sum",
    srcs = ["binary_tree_max_path_sum.cc"],
)

cc_binary(
    name = "bst_iterator",
    srcs = ["bst_iterator.cc"],
)

cc_binary(
    name = "count_complete_tree_nodes",
    srcs = ["count_complete_tree_nodes.cc"],
)

cc_binary(
    name = "lca_binary_tree",
    srcs = ["lca_binary_tree.cc"],
)

cc_binary(
    name = "binary_tree_right_side_view",
    srcs = ["binary_tree_right_side_view.cc"],
)

cc_binary(
    name = "avg_levels_binary_tree",
    srcs = ["avg_levels_binary_tree.cc"],
)

cc_binary(
    name = "binary_tree_level_order_traversal",
    srcs = ["binary_tree_level_order_traversal.cc"],
)

cc_binary(
    name = "binary_tree_zigzag_level_order_traversal",
    srcs = ["binary_tree_zigzag_level_order_traversal.cc"],
)

cc_binary(
    name = "bst_min_diff",
    srcs = ["bst_min_diff.cc"],
)

cc_binary(
    name = "bst_k_th_smallest",
    srcs = ["bst_k_th_smallest.cc"],
)

cc_binary(
    name = "is_valid_bst",
    srcs = ["is_valid_bst.cc"],
)

cc_binary(
    name = "number_of_islands",
    srcs = ["number_of_islands.cc"],
)

cc_binary(
    name = "surrounded_regions",
    srcs = ["surrounded_regions.cc"],
)

cc_binary(
    name = "clone_graph",
    srcs = ["clone_graph.cc"],
)

cc_binary(
    name = "evaluate_division",
    srcs = ["evaluate_division.cc"],
)

cc_binary(
    name = "course_schedule",
    srcs = ["course_schedule.cc"],
)

cc_binary(
    name = "course_schedule_2",
    srcs = ["course_schedule_2.cc"],
)

cc_binary(
    name = "snakes_and_ladders",
    srcs = ["snakes_and_ladders.cc"],
)
