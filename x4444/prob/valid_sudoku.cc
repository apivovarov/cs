#include <iostream>
#include <array>
#include <string>
#include <vector>

class Solution {
 public:
  bool isValidSudoku(const std::vector<std::vector<char>>& board) {
    std::array<bool, 81> mapC = {};
    std::array<bool, 27> mapS;
    std::array<bool, 9> mapR;
    for (int j = 0; j < 9; ++j) {
      std::fill(mapR.begin(), mapR.end(), false);
      if (j % 3 == 0) std::fill(mapS.begin(), mapS.end(), false);
      for (int i = 0; i < 9; ++i) {
        char c = board[j][i];
        if (c == '.') continue;

        int v = c - '0' - 1;
        if (mapR[v]) return false;
        mapR[v] = true;

        int sid = i / 3;
        int sV = sid * 9 + v;
        if (mapS[sV]) return false;
        mapS[sV] = true;

        int cV = i * 9 + v;
        if (mapC[cV]) return false;
        mapC[cV] = true;
      }
    }
    return true;
  }
};

void test(const std::vector<std::vector<char>>& board, bool expected) {
  Solution sol;
  bool res = sol.isValidSudoku(board);
  if (res != expected) {
    std::cerr << std::boolalpha << "ERROR: res: " << res
              << ", exp: " << expected << std::endl;
  }
}

int main() {
  test({{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}},
       true);

    test({{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '2', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}},
       false);

    test({{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '7', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}},
       false);

      test({{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
        {'.', '.', '.', '5', '1', '9', '.', '.', '5'},
        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}},
       false);
}
